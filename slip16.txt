a.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) 
{
   
    if (argc != 2)
    {
        fprintf(stderr, "Usage: %s <month>\n", argv[0]);
        return 1;
    }

   
    int target_month = atoi(argv[1]);
    if (target_month < 1 || target_month > 12) 
    {
        fprintf(stderr, "Invalid month. Please provide a valid month (1-12).\n");
        return 1;
    }

  
    DIR *dir = opendir(".");
    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

   
    struct dirent *entry;
    
    while ((entry = readdir(dir)) != NULL) 
    {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

       
        struct stat file_stat;
        if (stat(entry->d_name, &file_stat) == -1) 
        {
            perror("stat");
            continue;
        }

        
        struct tm *creation_time = localtime(&file_stat.st_ctime);
        int file_month = creation_time->tm_mon + 1; // Month is 0-based, so add 1

        
        if (file_month == target_month) 
        {
            printf("%s\n", entry->d_name);
        }
    }

    
    closedir(dir);
    return 0;
}
b.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t child_pid;


void signal_handler(int signum) {
    if (signum == SIGHUP) {
        printf("Child received SIGHUP signal.\n");
    } else if (signum == SIGINT) {
        printf("Child received SIGINT signal.\n");
    } else if (signum == SIGQUIT) {
        printf("My DADDY has Killed me!!!\n");
        exit(EXIT_SUCCESS);
    }
}

int main() {
 
    child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
       
        signal(SIGHUP, signal_handler);
        signal(SIGINT, signal_handler);
        signal(SIGQUIT, signal_handler);

        while (1) {
            
            sleep(1);
        }
    } else {
       
        printf("Parent process waiting for 30 seconds.\n");

       
        sleep(30);

      
        if (kill(child_pid, SIGHUP) == -1) {
            perror("kill SIGHUP");
            exit(EXIT_FAILURE);
        }

        sleep(3); // Wait for 3 more seconds

        
        if (kill(child_pid, SIGINT) == -1) {
            perror("kill SIGINT");
            exit(EXIT_FAILURE);
        }

      
        wait(NULL);

        printf("Parent process exiting.\n");
    }

    return 0;
}

