//Assignment No-7 Read the current directory and display the name of the files, no of files in current directory.
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() 
{
    // Open the current directory
    DIR *dir = opendir(".");

    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

    int file_count = 0;

    // Read the directory entries
    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) 
    {
        // Check if the entry is a regular file
        if (entry->d_type == DT_REG) 
        {
            printf("%s\n", entry->d_name);
            file_count++;
        }
    }

    // Close the directory
    closedir(dir);

    printf("Total number of files in the current directory: %d\n", file_count);

    return 0;
}
b.
//Assignment No-8 Write a C program which receives file names as command line
//arguments and display those filenames in ascending order according to their
//sizes. I) (e.g $ a.out a.txt b.txt c.txt, â€¦)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

// Define a structure to hold file information
struct FileInfo 
{
  char* name;
  off_t size;
};

// Comparison function for sorting FileInfo structures by size
int compareFileInfo(const void* a, const void* b) 
{
  return ((struct FileInfo*)a)->size - ((struct FileInfo*)b)->size;
}


int main(int argc, char* argv[]) 
{
  // Check if the user provided at least one file name
  if (argc < 2) 
  {
    fprintf(stderr,"Usage: %s <file1> <file2> ... <fileN>;\n", argv[0]);
    return 1;
  }

  // Create an array of FileInfo structures to hold file information
  struct FileInfo* fileInfos = malloc((argc - 1) * sizeof(struct FileInfo));

  if (fileInfos == NULL)
  {
    perror("Memory allocation failed");
    return 1;
  }

  // Obtain file sizes and store file information
  for (int i = 1; i <argc; i++) 
  {
    struct stat fileStat;

    if (stat(argv[i], &fileStat) == 0)
    {
      fileInfos[i - 1].name = strdup(argv[i]);
      fileInfos[i - 1].size = fileStat.st_size;
    } 
    else
    {
      perror("stat");
      return 1;
    }
  }

  // Sort the fileInfos array based on file size
  qsort(fileInfos, argc - 1, sizeof(struct FileInfo), compareFileInfo);

  // Display the sorted file names
  for (int i = 0; i < argc - 1; i++) 
  {
    printf("%s: %ld bytes\n", fileInfos[i].name, (long)fileInfos[i].size);
    free(fileInfos[i].name);
  }

  // Free allocated memory
  free(fileInfos);

  return 0;
}
