a.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>


struct FileInfo 
{
  char* name;
  off_t size;
};


int compareFileInfo(const void* a, const void* b) 
{
  return ((struct FileInfo*)a)->size - ((struct FileInfo*)b)->size;
}


int main(int argc, char* argv[]) 
{
 
  if (argc < 2) 
  {
    fprintf(stderr,"Usage: %s <file1> <file2> ... <fileN>;\n", argv[0]);
    return 1;
  }

 
  struct FileInfo* fileInfos = malloc((argc - 1) * sizeof(struct FileInfo));

  if (fileInfos == NULL)
  {
    perror("Memory allocation failed");
    return 1;
  }

  
  for (int i = 1; i <argc; i++) 
  {
    struct stat fileStat;

    if (stat(argv[i], &fileStat) == 0)
    {
      fileInfos[i - 1].name = strdup(argv[i]);
      fileInfos[i - 1].size = fileStat.st_size;
    } 
    else
    {
      perror("stat");
      return 1;
    }
  }

 
  qsort(fileInfos, argc - 1, sizeof(struct FileInfo), compareFileInfo);

 
  for (int i = 0; i < argc - 1; i++) 
  {
    printf("%s: %ld bytes\n", fileInfos[i].name, (long)fileInfos[i].size);
    free(fileInfos[i].name);
  }
b.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/wait.h>

int main() {
pid_t child_pid;
int status;


child_pid = fork();

if (child_pid == -1) {
perror("fork");
exit(EXIT_FAILURE);
}

if (child_pid == 0) {
printf("Child process (PID %d) is running.\n", getpid());

sleep(2);
printf("Child process (PID %d) is exiting.\n", getpid());
exit(42); // Exit with status 42
} else {

printf("Parent process (PID %d) is waiting for the child to terminate.\n", getpid());


if (wait(&status) == -1) {
perror("wait");
exit(EXIT_FAILURE);
}

if (WIFEXITED(status)) {

int exit_status = WEXITSTATUS(status);
printf("Child process (PID %d) exited with status: %d\n", child_pid, exit_status);
} else if (WIFSIGNALED(status)) {

int term_signal = WTERMSIG(status);
printf("Child process (PID %d) was terminated by signal: %d\n", child_pid, term_signal);
}
}

return 0;
}

  
  free(fileInfos);

  return 0;
}
