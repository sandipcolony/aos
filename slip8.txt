a.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    )
    int file_descriptor = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (file_descriptor == -1) {
        perror("Error opening file");
        return 1; 
    }

    if (dup2(file_descriptor, STDOUT_FILENO) == -1) {
        perror("Error redirecting stdout");
        return 1;
    }

    printf("This will be written to output.txt.\n");


    close(file_descriptor);


    printf("This will also be written to output.txt.\n");

    if (dup2(STDOUT_FILENO, file_descriptor) == -1) {
        perror("Error resetting stdout");
        return 1;
    }

    printf("This will be printed to the terminal.\n");

    return 0;
}
b.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() 
{
    int pipe_fd[2];
    pid_t pid1, pid2;

    if (pipe(pipe_fd) == -1) 
    {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid1 = fork();

    if (pid1 == -1) 
    {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid1 == 0) 
    { 
        close(pipe_fd[0]);

      
        dup2(pipe_fd[1], STDOUT_FILENO);
        close(pipe_fd[1]);


        execlp("ls", "ls", "-l", NULL);
        perror("execlp (ls)");
        exit(EXIT_FAILURE);
    } 
    else 
    { 
        pid2 = fork();

        if (pid2 == -1) 
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid2 == 0) 
        {
            close(pipe_fd[1]);

        
            dup2(pipe_fd[0], STDIN_FILENO);
            close(pipe_fd[0]);


            execlp("wc", "wc", "-l", NULL);
            perror("execlp (wc)");
            exit(EXIT_FAILURE);
        } 
        else 
        { 
            close(pipe_fd[0]);
            close(pipe_fd[1]);

      
            wait(NULL);
            wait(NULL);
        }
    }

    return 0;
}
