a.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>

int main() 
{
   
    long long n;
    printf("Enter the minimum file size in bytes: ");
    scanf("%lld", &n);

   
    DIR *dir = opendir(".");
    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

   
    struct dirent *entry;

    while ((entry = readdir(dir)) != NULL) 
    {
        
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

       
        struct stat file_stat;

        if (stat(entry->d_name, &file_stat) == -1) 
        {
            perror("stat");
            continue;
        }

        
        if (file_stat.st_size > n) 
        {
            printf("%s (%lld bytes)\n", entry->d_name, (long long)file_stat.st_size);
        }
    }

  
    closedir(dir);

    return 0;
}
b.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

void child_signal_handler(int signum) 
{
    if (signum == SIGCHLD) 
    {
        printf("\n Child process has terminated");
    }
}

void alarm_signal_handler(int signum) 
{
    if (signum == SIGALRM) 
    {
        printf("\n Child process did not complete within 5 seconds. Killing child");
        kill(getpid(), SIGKILL);
    }
}

int main() 
{
    pid_t child_pid;

    signal(SIGCHLD, child_signal_handler);
    signal(SIGALRM, alarm_signal_handler);

    child_pid = fork();

    if (child_pid == -1) 
    {
        printf("\n fork");
        exit(1);
    }

    if (child_pid == 0) 
    {
        printf("\n Child process is running");

        sleep(10);

        printf("\n Child process is done");
        exit(1);
    } 
    else 
    {
        printf("\n Parent process waiting for the child to complete or timeout (5 seconds)");

        alarm(5);

        wait(NULL);

        alarm(0);

        printf("\n Parent process is exiting");
    }

    return 0;
}
