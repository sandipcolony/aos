a.
#include <stdio.h>
#include <stdlib.h>
#include<fcntl.h>
#include<unistd.h>

int main() 
{
  
    FILE *file;

    
    file = fopen("output.txt", "w");

    if (file == NULL) 
    {
        perror("Error opening file");
        return 1;
    }


    int file_descriptor = fileno(file);  
    dup2(file_descriptor, 1);

   
    printf("This will be written to the file.\n");

   
    fclose(file);

   
    dup2(1, file_descriptor);

  
    printf("This will be printed to the terminal.\n");

    return 0;
}
b.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() 
{
    int pipe_fd[2];
    pid_t pid1, pid2;

   
    if (pipe(pipe_fd) == -1) 
    {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

 
    pid1 = fork();

    if (pid1 == -1) 
    {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid1 == 0) 
    {
       
        close(pipe_fd[0]);

    
        dup2(pipe_fd[1], STDOUT_FILENO);
        close(pipe_fd[1]);

        
        execlp("ls", "ls", "-l", NULL);
        perror("execlp (ls)");
        exit(EXIT_FAILURE);
    } 
    else 
    { // Parent
  
        pid2 = fork();

        if (pid2 == -1) 
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid2 == 0) 
        {
          
            close(pipe_fd[1]);

      
            dup2(pipe_fd[0], STDIN_FILENO);
            close(pipe_fd[0]);

            execlp("wc", "wc", "-l", NULL);
            perror("execlp (wc)");
            exit(EXIT_FAILURE);
        } 
        else 
        {
      
            close(pipe_fd[0]);
            close(pipe_fd[1]);

        
            wait(NULL);
            wait(NULL);
        }
    }

    return 0;
}
