a. 
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

int main(int argc, char *argv[]) 
{
    if (argc < 2) 
    {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    for (int i = 1; i < argc; i++) 
    {
        const char *filename = argv[i];
        struct stat file_info;

        if (stat(filename, &file_info) == -1) 
        {
            perror("stat");
            continue;
        }

        printf("File: %s\n", filename);
        printf("Inode Number: %ld\n", (long)file_info.st_ino);
        printf("\n");
    }

    return 0;    
}
b.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t child_pid;


void alarm_handler(int signum) {
    if (signum == SIGALRM) {
        printf("Alarm is fired.\n");
    }
}

int main() {
   
    signal(SIGALRM, alarm_handler);

  
    child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
       
        sleep(2); // Wait for 2 seconds

     
        if (kill(getppid(), SIGALRM) == -1) {
            perror("kill SIGALRM");
            exit(EXIT_FAILURE);
        }

        exit(EXIT_SUCCESS);
    } else {
        
        printf("Parent process waiting for the alarm.\n");

       
        wait(NULL);

        printf("Parent process exiting.\n");
    }

    return 0;
}
