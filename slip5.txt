a.
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() 
{
    
    DIR *dir = opendir(".");

    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

    int file_count = 0;

   
    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) 
    {
        
        if (entry->d_type == DT_REG) 
        {
            printf("%s\n", entry->d_name);
            file_count++;
        }
    }

  
    closedir(dir);

    printf("Total number of files in the current directory: %d\n", file_count);

    return 0;
}
b.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define MSG_SIZE 100

int main() {
    int pipefd[2];
    pid_t child_pid;


    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
 
        close(pipefd[0]); 

   
        char messages[][MSG_SIZE] = {
            "Hello World",
            "Hello SPPU",
            "Linux is Funny"
        };

        for (int i = 0; i < 3; i++) {
      
            write(pipefd[1], messages[i], strlen(messages[i]) + 1);
        }

        close(pipefd[1]);
        exit(EXIT_SUCCESS);
    } else {
       
        close(pipefd[1]); 
        char buffer[MSG_SIZE];

        while (read(pipefd[0], buffer, sizeof(buffer)) > 0) {
           
            printf("Parent received: %s\n", buffer);
        }

        close(pipefd[0]); 
        wait(NULL);      
    }

    return 0;
}
