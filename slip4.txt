
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) 
{
    if (argc != 2) 
    {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    const char *filename = argv[1];

    if (access(filename, F_OK) == 0) 
    {
        printf("File '%s' is present in the current directory.\n", filename);
    } 
    else 
    {
        printf("File '%s' is not present in the current directory.\n", filename);
    }

    return 0;
}
b.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t child_pid;


void signal_handler(int signum) {
    if (signum == SIGHUP) {
        printf("Child received SIGHUP signal.\n");
    } else if (signum == SIGINT) {
        printf("Child received SIGINT signal.\n");
    } else if (signum == SIGQUIT) {
        printf("Child received SIGQUIT signal. My Papa has Killed me!!!\n");
        exit(EXIT_SUCCESS);
    }
}

int main() {
    
    child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
       
        signal(SIGHUP, signal_handler);
        signal(SIGINT, signal_handler);
        signal(SIGQUIT, signal_handler);

        while (1) {
            
            sleep(1);
        }
    } else {
       
        sleep(3); 

       
        if (kill(child_pid, SIGHUP) == -1) {
            perror("kill SIGHUP");
            exit(EXIT_FAILURE);
        }

        sleep(3); 

      
        if (kill(child_pid, SIGINT) == -1) {
            perror("kill SIGINT");
            exit(EXIT_FAILURE);
        }

        sleep(9); 

       
        if (kill(child_pid, SIGQUIT) == -1) {
            perror("kill SIGQUIT");
            exit(EXIT_FAILURE);
        }

       
        wait(NULL);
    }

    return 0;
}
