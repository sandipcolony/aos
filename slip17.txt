a.
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() 
{
  DIR *dir=opendir(".");


    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

    int file_count = 0;

    
    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) 
    {
      
        if (entry->d_type == DT_REG) 
        {
            printf("%s\n", entry->d_name);
            file_count++;
        }
    }

   
    closedir(dir);

    printf("Total number of files in the current directory: %d\n", file_count);

    return 0;
}
b.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>

void signal_handler(int signum) {
    
}

int main() {
    int pipefd[2];
    pid_t ls_pid, wc_pid;

   
    signal(SIGINT, signal_handler);
    signal(SIGQUIT, signal_handler);

    
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }


    ls_pid = fork();

    if (ls_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (ls_pid == 0) {
      
        close(pipefd[0]); 
        dup2(pipefd[1], STDOUT_FILENO); 
        close(pipefd[1]); 

        
        execlp("ls", "ls", "-l", NULL);
        perror("execlp(ls)");
        exit(EXIT_FAILURE);
    } else {
        
        wc_pid = fork();

        if (wc_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (wc_pid == 0) {
          
            close(pipefd[1]); /
            dup2(pipefd[0], STDIN_FILENO); 
            close(pipefd[0]);

          
            execlp("wc", "wc", "-l", NULL);
            perror("execlp(wc)");
            exit(EXIT_FAILURE);
        } else {
          
            close(pipefd[0]); 

            
            waitpid(ls_pid, NULL, 0);
            waitpid(wc_pid, NULL, 0);
        }
    }

    return 0;
    }
