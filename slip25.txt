//Assignment No-11 Write a C Program that demonstrates redirection of standard output to a file.
#include <stdio.h>
#include <stdlib.h>
#include<fcntl.h>
#include<unistd.h>

int main() 
{
    // Declare a file pointer
    FILE *file;

    // Open a file for writing (or create if it doesn't exist)
    file = fopen("output.txt", "w");

    if (file == NULL) 
    {
        perror("Error opening file");
        return 1; // Exit with an error code
    }

    // Redirect standard output to the file
    int file_descriptor = fileno(file);    //fileno - map a stream pointer to a file descriptor
    dup2(file_descriptor, 1);

    // Now, anything written to stdout will be redirected to the file
    // Print to stdout (which will be redirected to the file)
    printf("This will be written to the file.\n");

    // Close the file
    fclose(file);

    // Reset standard output to the original stdout
    dup2(1, file_descriptor);

    // Print to the original stdout (usually the terminal)
    printf("This will be printed to the terminal.\n");

    return 0;
}
b.
//Assignment 13-Write a C program that redirects standard output to a file output.txt. (use of dup and open system call).


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    // Open the file "output.txt" for writing (create if it doesn't exist)
    int file_descriptor = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0666);//read write permission to everyone

    if (file_descriptor == -1) {
        perror("Error opening file");
        return 1; // Exit with an error code
    }

    // Redirect standard output (stdout) to the file using dup2
    if (dup2(file_descriptor, STDOUT_FILENO) == -1) {
        perror("Error redirecting stdout");
        return 1; // Exit with an error code
    }

    // Now, anything written to stdout will be redirected to "output.txt"

    // Print to stdout (which will be redirected to the file)
    printf("This will be written to output.txt.\n");

    // Close the file descriptor (this won't close stdout)
    close(file_descriptor);

    // Print to stdout (still redirected to the file)
    printf("This will also be written to output.txt.\n");

    // Reset standard output to the original stdout (usually the terminal)
    if (dup2(STDOUT_FILENO, file_descriptor) == -1) {
        perror("Error resetting stdout");
        return 1; // Exit with an error code
    }

    // Print to the original stdout (usually the terminal)
    printf("This will be printed to the terminal.\n");

    return 0;
}
