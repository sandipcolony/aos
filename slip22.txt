a.
#include <stdio.h>
#include <stdlib.h>
#include <sys/resource.h>

int main() {
struct rlimit rlim;


if (getrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Current maximum number of open files: %llu\n", (unsigned long long)rlim.rlim_cur);


rlim.rlim_cur = 1024; // Set the soft limit
rlim.rlim_max = 2048; // Set the hard limit

if (setrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("setrlimit");
exit(EXIT_FAILURE);
}


if (getrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Updated maximum number of open files:\n");
printf("Soft limit: %llu\n", (unsigned long long)rlim.rlim_cur);
printf("Hard limit: %llu\n", (unsigned long long)rlim.rlim_max);

if (getrlimit(RLIMIT_AS, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Current address space (memory) limit: %llu bytes\n", (unsigned long long)rlim.rlim_cur);


rlim.rlim_cur = 512 * 1024 * 1024;
rlim.rlim_max = 1024 * 1024 * 1024; 
if (setrlimit(RLIMIT_AS, &rlim) == -1) {
perror("setrlimit");
exit(EXIT_FAILURE);

}


if (getrlimit(RLIMIT_AS, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Updated address space (memory) limit:\n");
printf("Soft limit: %llu bytes\n", (unsigned long long)rlim.rlim_cur);
printf("Hard limit: %llu bytes\n", (unsigned long long)rlim.rlim_max);

return 0;
}
b.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>

void signal_handler(int signum) {
    
}

int main() {
    int pipefd[2];
    pid_t ls_pid, wc_pid;


    signal(SIGINT, signal_handler);
    signal(SIGQUIT, signal_handler);

   
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

  
    ls_pid = fork();

    if (ls_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (ls_pid == 0) {
      
        close(pipefd[0]); 
        dup2(pipefd[1], STDOUT_FILENO); 
        close(pipefd[1]);

       
        execlp("ls", "ls", "-l", NULL);
        perror("execlp(ls)");
        exit(EXIT_FAILURE);
    } else {
        
        wc_pid = fork();

        if (wc_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (wc_pid == 0) {
           
            close(pipefd[1]); 
            dup2(pipefd[0], STDIN_FILENO);
            close(pipefd[0]); 

       
            execlp("wc", "wc", "-l", NULL);
            perror("execlp(wc)");
            exit(EXIT_FAILURE);
        } else {
           
            close(pipefd[0]);
           
            waitpid(ls_pid, NULL, 0);
            waitpid(wc_pid, NULL, 0);
        }
    }

    return 0;
    }
