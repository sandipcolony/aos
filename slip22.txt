/*Assignment No-22 Write a C program to get and set the resource limits such as files, memory
associated with a process.
In Unix-like operating systems, you can use the getrlimit and setrlimit functions to get and set resource
limits associated with a process. These functions are part of the sys/resource.h header. Below is an
example C program that demonstrates how to use these functions to get and set resource limits for the
number of open files and memory usage:*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/resource.h>

int main() {
struct rlimit rlim;

// Get the current resource limit for maximum number of open files
if (getrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Current maximum number of open files: %llu\n", (unsigned long long)rlim.rlim_cur);

// Set a new resource limit for maximum number of open files
rlim.rlim_cur = 1024; // Set the soft limit
rlim.rlim_max = 2048; // Set the hard limit

if (setrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("setrlimit");
exit(EXIT_FAILURE);
}

// Get and print the updated resource limit
if (getrlimit(RLIMIT_NOFILE, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Updated maximum number of open files:\n");
printf("Soft limit: %llu\n", (unsigned long long)rlim.rlim_cur);
printf("Hard limit: %llu\n", (unsigned long long)rlim.rlim_max);

// Get the current resource limit for memory (address space)
if (getrlimit(RLIMIT_AS, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Current address space (memory) limit: %llu bytes\n", (unsigned long long)rlim.rlim_cur);

// Set a new resource limit for memory (address space)
rlim.rlim_cur = 512 * 1024 * 1024; // Set the soft limit to 512 MB
rlim.rlim_max = 1024 * 1024 * 1024; // Set the hard limit to 1 GB

if (setrlimit(RLIMIT_AS, &rlim) == -1) {
perror("setrlimit");
exit(EXIT_FAILURE);

}

// Get and print the updated resource limit for memory
if (getrlimit(RLIMIT_AS, &rlim) == -1) {
perror("getrlimit");
exit(EXIT_FAILURE);
}

printf("Updated address space (memory) limit:\n");
printf("Soft limit: %llu bytes\n", (unsigned long long)rlim.rlim_cur);
printf("Hard limit: %llu bytes\n", (unsigned long long)rlim.rlim_max);

return 0;
}
b.
/*Assignment No 30 Write a C program to implement the following unix/linux command (use fork, pipe SPPU M.Sc. Computer Science Syllabus 2023-24 19 and exec system call). Your program should block the signal Ctrl-C and Ctrl-\ signal during the execution. i. Ls â€“l | wc â€“l
To implement the Unix/Linux command ls -l | wc -l in a C program using fork, pipe, and exec system calls, and to block the Ctrl-C and Ctrl-\ signals during execution*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>

void signal_handler(int signum) {
    // Empty signal handler to block Ctrl-C and Ctrl-\ signals
}

int main() {
    int pipefd[2];
    pid_t ls_pid, wc_pid;

    // Block Ctrl-C and Ctrl-\ signals
    signal(SIGINT, signal_handler);
    signal(SIGQUIT, signal_handler);

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Create the first child process for "ls -l"
    ls_pid = fork();

    if (ls_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (ls_pid == 0) {
        // Child process for "ls -l"
        close(pipefd[0]); // Close the read end of the pipe
        dup2(pipefd[1], STDOUT_FILENO); // Redirect stdout to the write end of the pipe
        close(pipefd[1]); // Close the original write end of the pipe

        // Execute "ls -l" command
        execlp("ls", "ls", "-l", NULL);
        perror("execlp(ls)");
        exit(EXIT_FAILURE);
    } else {
        // Create the second child process for "wc -l"
        wc_pid = fork();

        if (wc_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (wc_pid == 0) {
            // Child process for "wc -l"
            close(pipefd[1]); // Close the write end of the pipe
            dup2(pipefd[0], STDIN_FILENO); // Redirect stdin to the read end of the pipe
            close(pipefd[0]); // Close the original read end of the pipe

            // Execute "wc -l" command
            execlp("wc", "wc", "-l", NULL);
            perror("execlp(wc)");
            exit(EXIT_FAILURE);
        } else {
            // Parent process
            close(pipefd[0]); // Close both ends of the pipe in the parent

            // Wait for both child processes to finish
            waitpid(ls_pid, NULL, 0);
            waitpid(wc_pid, NULL, 0);
        }
    }

    return 0;
    }
