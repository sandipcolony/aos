//Assignment No-9 Display all the files from current directory which are created in
//particular month.To display all the files from the current directory that were created 
//in a particular month using C programming on Unix-like systems, you can use the 
//dirent.h library to iterate through the files and the stat function to get file creation 
//timestamps. Here&#39;s a C program that does this:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) 
{
    // Check if the user provided the target month as an argument
    if (argc != 2)
    {
        fprintf(stderr, "Usage: %s <month>\n", argv[0]);
        return 1;
    }

    // Convert the month argument to an integer (1-12)
    int target_month = atoi(argv[1]);
    if (target_month < 1 || target_month > 12) 
    {
        fprintf(stderr, "Invalid month. Please provide a valid month (1-12).\n");
        return 1;
    }

    // Open the current directory
    DIR *dir = opendir(".");
    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }

    // Read the directory entries
    struct dirent *entry;
    
    while ((entry = readdir(dir)) != NULL) 
    {
        // Skip "." and ".." directory entries
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

        // Get file information
        struct stat file_stat;
        if (stat(entry->d_name, &file_stat) == -1) 
        {
            perror("stat");
            continue;
        }

        // Extract the month from the file&#39;s creation timestamp
        struct tm *creation_time = localtime(&file_stat.st_ctime);
        int file_month = creation_time->tm_mon + 1; // Month is 0-based, so add 1

        // Check if the file was created in the target month
        if (file_month == target_month) 
        {
            printf("%s\n", entry->d_name);
        }
    }

    // Close the directory
    closedir(dir);
    return 0;
}
b.
/*Assignment no-20 Write a C program to create "nâ€Ÿ child processes. When all "nâ€Ÿ child processes terminates, Display total cumulative time children spent in user and kernel mode.
To create "n" child processes and measure the total cumulative time these child processes spent in user and kernel mode, you can use the fork() system call to create child processes and then utilize the getrusage() function to gather resource usage information. */


#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>
#include <unistd.h>

int main(int argc, char *argv[]) 
{
    if (argc != 2) 
    {
        printf("Usage: %s <number_of_children>\n", argv[0]);
        return 1;
    }

    int n = atoi(argv[1]);
    int i;

    for (i = 0; i < n; i++) 
    {
        pid_t child_pid = fork();

        if (child_pid == -1) 
        {
            perror("fork");
            return 1;
        } 
        else if (child_pid == 0) 
        {
            // This is the child process
            // Perform some work here
            exit(0);
        }
    }

    // Parent process
    int status;
    struct rusage child_usage;
    struct timeval user_time, sys_time;
    double total_user_time = 0.0;
    double total_sys_time = 0.0;

    for (i = 0; i < n; i++) 
    {
        wait(&status);
        if (WIFEXITED(status)) 
        {
            // Get resource usage for the terminated child
            getrusage(RUSAGE_CHILDREN, &child_usage);

            // Calculate total user and system time
            user_time = child_usage.ru_utime;
            sys_time = child_usage.ru_stime;
            total_user_time += (double)user_time.tv_sec + (double)user_time.tv_usec / 1000000.0;
            total_sys_time += (double)sys_time.tv_sec + (double)sys_time.tv_usec / 1000000.0;
        }
    }

    printf("Total cumulative user time: %.6f seconds\n", total_user_time);
    printf("Total cumulative system time: %.6f seconds\n", total_sys_time);

    return 0;
}
