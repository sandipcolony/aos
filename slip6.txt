a.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) 
{
   
    if (argc != 2)
    {
        fprintf(stderr, "Usage: %s <month>\n", argv[0]);
        return 1;
    }

    
    int target_month = atoi(argv[1]);
    if (target_month < 1 || target_month > 12) 
    {
        fprintf(stderr, "Invalid month. Please provide a valid month (1-12).\n");
        return 1;
    }


    DIR *dir = opendir(".");
    if (dir == NULL) 
    {
        perror("opendir");
        return 1;
    }


    struct dirent *entry;
    
    while ((entry = readdir(dir)) != NULL) 
    {
     
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

   
        struct stat file_stat;
        if (stat(entry->d_name, &file_stat) == -1) 
        {
            perror("stat");
            continue;
        }

        struct tm *creation_time = localtime(&file_stat.st_ctime);
        int file_month = creation_time->tm_mon + 1;

        if (file_month == target_month) 
        {
            printf("%s\n", entry->d_name);
        }
    }


    closedir(dir);
    return 0;
}
b.
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>
#include <unistd.h>

int main(int argc, char *argv[]) 
{
    if (argc != 2) 
    {
        printf("Usage: %s <number_of_children>\n", argv[0]);
        return 1;
    }

    int n = atoi(argv[1]);
    int i;

    for (i = 0; i < n; i++) 
    {
        pid_t child_pid = fork();

        if (child_pid == -1) 
        {
            perror("fork");
            return 1;
        } 
        else if (child_pid == 0) 
        {
         
      
            exit(0);
        }
    }


    int status;
    struct rusage child_usage;
    struct timeval user_time, sys_time;
    double total_user_time = 0.0;
    double total_sys_time = 0.0;

    for (i = 0; i < n; i++) 
    {
        wait(&status);
        if (WIFEXITED(status)) 
        {
            getrusage(RUSAGE_CHILDREN, &child_usage);

   
            user_time = child_usage.ru_utime;
            sys_time = child_usage.ru_stime;
            total_user_time += (double)user_time.tv_sec + (double)user_time.tv_usec / 1000000.0;
            total_sys_time += (double)sys_time.tv_sec + (double)sys_time.tv_usec / 1000000.0;
        }
    }

    printf("Total cumulative user time: %.6f seconds\n", total_user_time);
    printf("Total cumulative system time: %.6f seconds\n", total_sys_time);

    return 0;
}
