a.
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

int main(int argc, char *argv[]) 
{
    if (argc < 2) 
    {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    for (int i = 1; i < argc; i++) 
    {
        const char *filename = argv[i];
        struct stat file_info;

        if (stat(filename, &file_info) == -1) 
        {
            perror("stat");
            continue;
        }

        printf("File: %s\n", filename);
        printf("Inode Number: %ld\n", (long)file_info.st_ino);
        printf("\n");
    }

    return 0;    
}
b.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() 
{
    int pipe_fd[2];
    pid_t pid1, pid2;

   
    if (pipe(pipe_fd) == -1) 
    {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

   
    pid1 = fork();

    if (pid1 == -1) 
    {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid1 == 0) 
    { 
        close(pipe_fd[0]);

      
        dup2(pipe_fd[1], STDOUT_FILENO);
        close(pipe_fd[1]);

      
        execlp("ls", "ls", "-l", NULL);
        perror("execlp (ls)");
        exit(EXIT_FAILURE);
    } 
    else 
    {
        pid2 = fork();

        if (pid2 == -1) 
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid2 == 0) 
        {
            close(pipe_fd[1]);

         
            dup2(pipe_fd[0], STDIN_FILENO);
            close(pipe_fd[0]);
 
            execlp("wc", "wc", "-l", NULL);
            perror("execlp (wc)");
            exit(EXIT_FAILURE);
        } 
        else 
        { /
            close(pipe_fd[0]);
            close(pipe_fd[1]);

           
            wait(NULL);
            wait(NULL);
        }
    }

    return 0;
}
